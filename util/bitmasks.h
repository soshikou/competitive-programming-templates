#pragma once
#define set_bit(n, x) (n | (1 << x))
#define do_set_bit(n, x) n |= (1 << x)
#define is_set_bit(n, x) ((n >> x) & 1)
#define filp_bit(n, x) (n ^ (1 << x))
#define do_flip_bit(n, x) n ^= (1 << x)
#define clear_bit(n, x) (n & ~(1 << x))
#define do_clear_bit(n, x) n &= ~(1 << x)
#define clear_lowest_1(n) (n & (n - 1))
#define do_clear_lowest_1(n) n &= (n - 1)
#define clear_all_lowest_1(n) (n & (n + 1))
#define do_clear_all_lowest_1(n) n &= (n + 1)
#define set_lowest_0(n) (n | (n + 1))
#define do_set_lowest_0(n) n |= (n + 1)
#define get_lowest_1(n) (n & -n)
#define is_divisible_by_power_of_2(n, k) ((n & ((1 << k) - 1)) == 0)
#define is_power_of_2(n) (n && !(n & (n - 1)))
//note that when i == 0, the statements will NOT be processed.
#define forbitmasks(i, n) for (i = n; i; i = (i - 1) & n)
